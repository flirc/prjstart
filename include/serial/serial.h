/*
 * Copyright 2012 Robert C. Curtis. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above
 *       copyright notice, this list of conditions and the following
 *       disclaimer in the documentation and/or other materials
 *       provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY ROBERT C. CURTIS ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ROBERT C. CURTIS OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
 * The views and conclusions contained in the software and documentation
 * are those of the authors and should not be interpreted as representing
 * official policies, either expressed or implied, of Robert C. Curtis.
 */

#ifndef I__SERIAL_H__
	#define I__SERIAL_H__

/* Darwin specific code at the moment */
#ifndef __HOST_DARWIN__
#error "Only Darwin currently supported"
#endif

#include <IOKit/IOKitLib.h>
#include <IOKit/serial/IOSerialKeys.h>
#include <sys/termios.h>
#include <sys/types.h>
#include <stdint.h>

#define	MAXPATHLEN			PATH_MAX

/*
 * Serial Device
 *
 * 	Data structure that stores all context for a serial device.
 *
 */
struct serial_device {
	int fd;
	struct termios saved_tty_attrs;
};


/***************************** Device Discovery *****************************/
/* FUNCTION:    serial_device_list
 *
 * + DESCRIPTION:
 *   - Returns a list of serial devices.
 *
 * + RETURNS: char **
 *   - A pointer to a list of string pointers.
 */
char **serial_device_list(void);

/* FUNCTION:    serial_free_device_list
 *
 * + DESCRIPTION:
 *   - Free a device list generated by serial_device_list()
 *
 * + PARAMETERS:
 *   + char **device_paths
 *     - list returned by serial_device_list()
 */
void serial_free_device_list(char **device_paths);


/***************************** Device Management ****************************/
/* FUNCTION:    serial_open
 *
 * + DESCRIPTION:
 *   - Open a serial port with parameters
 *
 * + PARAMETERS:
 *   + const char *device_path
 *     - device path
 *   + uint32_t baud
 *     - baud rate
 *   + uint8_t stopbits
 *     - number of stop bits
 *
 * + RETURNS: struct serial_device *
 *   - serial device structure
 */
struct serial_device *serial_open(const char *device_path, uint32_t baud,
		uint8_t stopbits);

/* FUNCTION:    serial_close
 *
 * + DESCRIPTION:
 *   - Close a serial port
 *
 * + PARAMETERS:
 *   + struct serial_device *dev
 *     - serial device structure
 */
void serial_close(struct serial_device *dev);


/******************************** Device I/O ********************************/
/* FUNCTION:    serial_write
 *
 * + DESCRIPTION:
 *   - Write buffer to serial port
 *
 * + PARAMETERS:
 *   + struct serial_device *dev
 *     - serial device structure
 *   + const void *buf
 *     - buffer to write
 *   + size_t len
 *     - length of buffer in bytes
 *
 * + RETURNS: ssize_t
 *   - returns bytes written, -1 on error
 */
ssize_t serial_write(struct serial_device *dev, const void *buf, size_t len);

/* FUNCTION:    serial_read
 *
 * + DESCRIPTION:
 *   - Read bytes from serial port
 *
 * + PARAMETERS:
 *   + struct serial_device *dev
 *     - serial device structure
 *   + void *buf
 *     - buffer to read into
 *   + size_t len
 *     - length to read
 *
 * + RETURNS: ssize_t
 *   - returns bytes ready, -1 on error
 */
ssize_t serial_read(struct serial_device *dev, void *buf, size_t len);

/* FUNCTION:    serial_flush
 *
 * + DESCRIPTION:
 *   - Flush serial port read bytes. Throw away any bytes in receive queue.
 *
 * + PARAMETERS:
 *   + struct serial_device *dev
 *     - serial device structure
 */
void serial_flush(struct serial_device *dev);

#endif /* I__SERIAL_H__ */
